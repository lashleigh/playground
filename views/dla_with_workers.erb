<div id="functions" style="clear:both;">
<button onclick="startSimulation()">Start or restart</button>
<button onclick="playSim()">Play</button></br>
<button onclick="pauseSim()">Pause</button></br>
</div>

<script>
var simulations = [];  
function sim_stats() {
  return '<div class="result"></div><div class="time"></div><button class="saveSim" id="sim_'+simulations.length+'">Save</button></br>'
}

function init(radius, pixels_per) {
  var that = this;

  var TIME = Math.floor(Math.random()*1530);
  this.COLOR = makeColor(TIME);
  this.RADIUS = Math.floor(radius) || 500;
  this.STEP = Math.floor(pixels_per) || 1;
  this.CANVAS_SIZE = this.RADIUS*2*this.STEP;

  this.idle = true;
  this.grid;
  this.edge = 25; 
  this.sticking_prob = 1.0;

  this.start_time = new Date();
  this.finish_time;
  this.intervalID;
  this.canvas;
  this.context;
  this.execute = randomMatch;

  // canvas element and 2D context

  that.canvas = document.createElement('canvas');
  that.canvas.width = that.CANVAS_SIZE;
  that.canvas.height = that.CANVAS_SIZE;
  $(that.canvas).addClass("mycanvas");
  //document.body.appendChild(that.canvas);
  $("#functions").after(that.canvas);
  $(that.canvas).before(sim_stats());
  that.context = that.canvas.getContext('2d');

  that.context.fillStyle="rgb(255,255,255)";
  that.context.fillRect(0,0, that.CANVAS_SIZE, that.CANVAS_SIZE);

  function randomMatch(iters) {
    that.idle = false;
    $('.result').first().text("computing");
    worker.postMessage({'cmd': 'grid', 'grid':that.grid, 'radius':that.RADIUS, 'edge':that.edge, 'num':iters, 'sticking_prob':that.sticking_prob});
  }

  var worker = new Worker('js/worker.js');

  worker.addEventListener('message', function(e) {
    var res = e.data;
    that.edge = res.edge;
    //console.log(that.edge, Math.sqrt(res.max_dist));
    for(var i = 0; i < res.coords.length; i++) {
      if(i%25===0) { TIME += 1; that.COLOR = makeColor(TIME);}
      var x = res.coords[i].x;
      var y = res.coords[i].y;
      that.grid[x][y] += 1;
      draw_point(that, x, y); 
    }
    $('.result').first().text(res.iter+" and coords length: "+res.coords.length);
    if((res.iter != 0) && (that.edge < that.RADIUS)) {
      that.idle = true;
    } else {
      that.finish_time = new Date();
      $(".time").first().text("Finished in: "+(that.finish_time-that.start_time)/1000.0+" sec");
    }
  }, false);

  this.reset_grid();
  this.create_nuclei();
} 
init.prototype.pause = function() {
  var sim = this;
  sim.idle = false;
  clearInterval(sim.intervalID);
}
init.prototype.play = function(iters) {
  var sim = this;
  sim.idle = true;
  iters = iters || 75;

  sim.intervalID = setInterval(function() {
    if(sim.idle) {
      sim.execute(iters);
    }
  }, 1000/10);
}
init.prototype.create_nuclei = function() {
  var sim = this;
  for(var i=sim.RADIUS-2; i<sim.RADIUS+2; i++) {
    for(var j=sim.RADIUS-2; j<sim.RADIUS+2; j++) {
      sim.grid[i][j] = 1;
      draw_point(sim, i, j);
    }
  }
}
init.prototype.save = function() {
  window.open( this.canvas.toDataURL('image/png'), 'mywindow' );
}
init.prototype.reset_grid = function() {
  var sim = this;
  sim.grid = []
  for(var i=0; i < sim.RADIUS*2; i++) {
    sim.grid[i] = [];
    for(var j=0; j < sim.RADIUS*2; j++) {
      sim.grid[i][j] = 0;
    }  
  }
}
init.prototype.clear = function() {
  var sim = this;
  sim.pause();
  sim.edge = 25;
  sim.reset_grid();
  sim.create_nuclei(); 
  sim.context.fillStyle="rgb(255,255,255)";
  sim.context.fillRect(0,0, sim.CANVAS_SIZE, sim.CANVAS_SIZE);
}

init.prototype.draw_circle = function(r) {
  for(var i=0; i<r*8; i++) {c = random_from_polar(r, this.RADIUS); draw_point(this, c.x, c.y, true)}
}
init.prototype.grid_occupation = function() {
  var num = 0
  for(var i=0; i< this.RADIUS*2; i++) {
    for(var j=0; j < this.RADIUS*2; j++) {
      num += this.grid[i][j];
    }
  }
  return num;
}
init.prototype.mass_at_radius = function(r) {
  var sim = this;
  var num = 0;
  r = Math.floor(r);
  for(var i=-r; i<r; i++) {
    for(var j=-r; j < r; j++) {
      if(i*i+j*j <= r*r) { 
        num += sim.grid[i+sim.RADIUS][j+sim.RADIUS];
      } 
    }
  }
  return num
}
init.prototype.dimension = function() {
  var masses = []
  for(var i=10; i< this.RADIUS; i+=10) {
    masses.push(this.mass_at_radius(i));
  }
}
function draw_point(sim,x,y,exception) {
  if(sim.grid[x][y]==1 || exception) {
  var c = sim.context;
  c.fillStyle = sim.COLOR;
  c.beginPath();
  c.rect(x*sim.STEP, y*sim.STEP, sim.STEP, sim.STEP)
  c.closePath();
  c.fill();
  }
}
function clear_point(x,y) {
  var c = sim.context;
  c.fillStyle = '#fff'; 
  c.beginPath();
  c.rect(x*sim.STEP, y*sim.STEP, sim.STEP, sim.STEP)
  c.closePath();
  c.fill();
}

// Do Awesome Things With Colors!
function makeColor(index) {
  function color(i) {
    // Wrap around using modulus 
    i = Math.floor(i) % 1530;

    // Calculate the value
    var v;
    if(i < 255)       v = i;
    else if(i < 765)  v = 255;
    else if(i < 1020) v = 255 - (i - 765);
    else              v = 0;

    // Make it a zero-padded value
    v = v.toString(16);
    if(v.length == 1) return "0" + v;
    else              return v;
  }
  function red(i)   { return color(i + 510); }
  function green(i) { return color(i);        }
  function blue(i)  { return color(i + 1020);  }

  return "#" + red(index) + green(index) + blue(index);
}
function startSimulation(iters, radius, pixels_per) {
  pauseSim();
  var sim = new init(radius || 400, pixels_per || 1)
  sim.play(iters || 75);
  simulations.push(sim);
}
function playSim() {
  if(simulations.length) {
    simulations[simulations.length-1].play();
  }
}
function pauseSim() {
  if(simulations.length) {
    simulations[simulations.length-1].pause();
  }
}
$(".saveSim").live("click", function() {
  var id = $(".saveSim").index(this);
  simulations[simulations.length-1-id].save();
});
function random_from_polar(r, RADIUS) {
  var angle = Math.random()*2*Math.PI;
  var x = Math.floor(r*Math.cos(angle))+RADIUS;
  var y = Math.floor(r*Math.sin(angle))+RADIUS;
  return {'x':x, 'y':y};
}
function clear_circle(radius) {
  for(var i=0; i<radius*8; i++) {c = random_from_polar(radius, RADIUS); clear_point(c.x, c.y)}
}
</script>
